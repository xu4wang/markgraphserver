###
GET https://markgraphserver.vercel.app/

###
GET https://markgraphserver.vercel.app/keys


###
GET https://markgraphserver.vercel.app/dbinfo


### 
POST https://markgraphserver.vercel.app/store/hello
Content-Type: application/json

{ 
    "b64": 100,
    "merchant_order_id": "austin_test_01",
    "note": "some note for this order",
    "redirect_url": "http://www.baidu.com",
    "redirect_url_fail": "http://www.baidu.com",
    "signature": "49083F9F27D1593A34D4BC1D5338ECFEE49F49663ED129D77D3CB3ECBAA962E3",
    "timestamp": "1621354265"
}


###

get https://markgraphserver.vercel.app/store/hello

###
delete https://markgraphserver.vercel.app/store/hello


###

get https://markgraphserver.vercel.app/store/markgraph


### 
POST https://markgraphserver.vercel.app/store/markgraph
Content-Type: application/json

{ 
    "b64": ""
}
